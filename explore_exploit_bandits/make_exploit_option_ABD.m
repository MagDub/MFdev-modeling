
function [chosenOptionFreqABD,chosenOptionFreqABD_desc, exploitMatAllPart_LH, exploitMatAllPart_LH_desc, FreqisExploited, FreqisExplored]=make_exploit_option_ABD(ID_mat)
    
    exploitMatAllPart_LH = {};
    FreqisExploited = {};
    FreqisExplored = {};
    chosenOptionFreq = nan(size(ID_mat,2),6);
    
    % Desc from NADA
    load('D:\MaggiesFarm\2019_01_07_NADA_explore\MaggiesFarm_task\2019_07_01_apple_task_training\data_analysis\part_501\mat_ABD_desc.mat')
    

    for ID_n=1:size(ID_mat,2)
    
    part = ID_mat(ID_n);
    
        % start loop
        tmp = load(strcat('D:\MaggiesFarm\2019_04_17_MF_dev_explore\data_analysis\part_',num2str(part),'\mat_ABD.mat'));

        meanA=mean([tmp.mat_ABD(:,5),tmp.mat_ABD(:,6),tmp.mat_ABD(:,7)]')';
        stdA=std([tmp.mat_ABD(:,5),tmp.mat_ABD(:,6),tmp.mat_ABD(:,7)]')';
        maxA=max(tmp.mat_ABD(:,5),max(tmp.mat_ABD(:,6),tmp.mat_ABD(:,7)));
        minA=min(tmp.mat_ABD(:,5),min(tmp.mat_ABD(:,6),tmp.mat_ABD(:,7)));

        valueB=tmp.mat_ABD(:,8);
        valueD=tmp.mat_ABD(:,9);
        chosen=tmp.mat_ABD(:,10);
        hor=tmp.mat_ABD(:,3);
        gameID=tmp.mat_ABD(:,4);
        sizeChosenApple=tmp.mat_ABD(:,11);
        block=tmp.mat_ABD(:,1);
        blocktrial=tmp.mat_ABD(:,2);

        values = [meanA,valueB,nan(24,1),valueD];
        [maxValues,IndmaxValues] = max(values');
        exploitTree=IndmaxValues';
        exploitTreeValue=maxValues';

        if exploitTree==4
            disp('D is exploitation!!!!');
        end

        exploitMat=[hor,exploitTree,chosen,gameID,sizeChosenApple,block,blocktrial,exploitTreeValue];
        exploitMat_SH=exploitMat(exploitMat(:,1)==6,2:8);
        exploitMat_LH=exploitMat(exploitMat(:,1)==11,2:8);

        % SH
        exploitChosenSH = exploitMat_SH(:,1)==exploitMat_SH(:,2);
        exploreChosenSH = [];
            for i=1:size(exploitMat_SH,1)
                exploreChosenSH(end+1,1)=((exploitMat_SH(i,1)==1)&&(exploitMat_SH(i,2)==2))||((exploitMat_SH(i,1)==2)&&(exploitMat_SH(i,2)==1));
            end
        badChosenSH = exploitMat_SH(:,2)==4;

        % LH
        exploitChosenLH = exploitMat_LH(:,1)==exploitMat_LH(:,2);
        exploreChosenLH = [];
            for i=1:size(exploitMat_LH,1)
                exploreChosenLH(end+1,1)=((exploitMat_LH(i,1)==1)&&(exploitMat_LH(i,2)==2))||((exploitMat_LH(i,1)==2)&&(exploitMat_LH(i,2)==1));
            end
        badChosenLH = exploitMat_LH(:,2)==4;

        exploitMatAllPart_LH_desc = {'exploitTree','chosen','gameID','sizeChosenApple','block','blocktrial', 'exploitTreevalue'};
        exploitMatAllPart_LH{ID_n}=exploitMat_LH;
        
        FreqisExploited{ID_n}.TreeA_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==exploitMat_LH(:,2)),1)==1),1);
        FreqisExploited{ID_n}.TreeA_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==exploitMat_SH(:,2)),1)==1),1);
        FreqisExploited{ID_n}.TreeB_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==exploitMat_LH(:,2)),1)==2),1);
        FreqisExploited{ID_n}.TreeB_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==exploitMat_SH(:,2)),1)==2),1);
        
        FreqisExplored{ID_n}.TreeB_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==1),2)==2),1); % exploit is A, B is explored
        FreqisExplored{ID_n}.TreeB_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==1),2)==2),1);
        FreqisExplored{ID_n}.TreeA_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==2),2)==1),1); % exploit is B, A is explored
        FreqisExplored{ID_n}.TreeA_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==2),2)==1),1);
        
        % exploitSH, exploreSH, badSH, exploitLH, exploreLH, badLH
        chosenOptionFreq(ID_n,:)=sum([exploitChosenSH,exploreChosenSH,badChosenSH,exploitChosenLH,exploreChosenLH,badChosenLH]); 
    end

    chosenOptionFreqABD_desc={'exploitSH', 'exploreSH','badSH', 'exploitLH', 'exploreLH', 'badLH'};
    chosenOptionFreqABD = chosenOptionFreq; %/(96/8);

end

